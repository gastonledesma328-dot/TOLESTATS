# ============================================
# ARCHIVO 1: requirements.txt
# ============================================
flask==3.0.0
flask-cors==4.0.0
beautifulsoup4==4.12.2
requests==2.31.0
gunicorn==21.2.0
lxml==4.9.3

# ============================================
# ARCHIVO 2: Procfile (para Heroku/Railway)
# ============================================
web: gunicorn app:app

# ============================================
# ARCHIVO 3: render.yaml (para Render.com)
# ============================================
services:
  - type: web
    name: ole-scraper-api
    runtime: python
    buildCommand: pip install -r requirements.txt
    startCommand: gunicorn app:app
    envVars:
      - key: PYTHON_VERSION
        value: 3.11.0

# ============================================
# ARCHIVO 4: vercel.json (para Vercel)
# ============================================
{
  "version": 2,
  "builds": [
    {
      "src": "app.py",
      "use": "@vercel/python"
    }
  ],
  "routes": [
    {
      "src": "/(.*)",
      "dest": "app.py"
    }
  ]
}

# ============================================
# ARCHIVO 5: railway.json (para Railway)
# ============================================
{
  "$schema": "https://railway.app/railway.schema.json",
  "build": {
    "builder": "NIXPACKS"
  },
  "deploy": {
    "startCommand": "gunicorn app:app",
    "restartPolicyType": "ON_FAILURE",
    "restartPolicyMaxRetries": 10
  }
}

# ============================================
# ARCHIVO 6: .gitignore
# ============================================
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
venv/
env/
ENV/
.venv
*.log
.DS_Store
.env

# ============================================
# ARCHIVO 7: runtime.txt (para Heroku)
# ============================================
python-3.11.0

# ============================================
# INSTRUCCIONES DE DEPLOY
# ============================================

## OPCIÓN 1: RENDER.COM (RECOMENDADO - GRATIS Y FÁCIL)
## ================================================

1. Crear cuenta en https://render.com (gratis)

2. Conectar tu repositorio de GitHub:
   - Crear un nuevo repositorio en GitHub
   - Subir estos archivos: app.py, requirements.txt, render.yaml

3. En Render Dashboard:
   - Click en "New +" → "Web Service"
   - Conectar tu repositorio
   - Render detectará automáticamente Python
   - Build Command: pip install -r requirements.txt
   - Start Command: gunicorn app:app
   - Click "Create Web Service"

4. ¡Listo! Tu API estará en: https://tu-servicio.onrender.com

Ventajas:
✅ Completamente gratis
✅ Deploy automático con cada push a GitHub
✅ HTTPS incluido
✅ 750 horas gratis al mes
✅ Se mantiene activo 24/7


## OPCIÓN 2: RAILWAY.APP (FÁCIL Y RÁPIDO)
## =======================================

1. Ir a https://railway.app

2. Click "Start a New Project" → "Deploy from GitHub repo"

3. Seleccionar tu repositorio con app.py y requirements.txt

4. Railway detecta Python automáticamente y despliega

5. Tu API estará lista en minutos

Ventajas:
✅ $5 de crédito gratis
✅ Muy fácil de usar
✅ Deploy automático
✅ Buena performance


## OPCIÓN 3: PYTHONANYWHERE (SIN GITHUB)
## =====================================

1. Crear cuenta en https://www.pythonanywhere.com (gratis)

2. En Dashboard → "Web" → "Add a new web app"

3. Seleccionar Flask y Python 3.10

4. En la consola Bash, copiar el código de app.py

5. Instalar dependencias:
   pip install --user flask flask-cors beautifulsoup4 requests

6. Configurar WSGI file apuntando a app.py

7. Reload web app

Ventajas:
✅ No requiere GitHub
✅ Interfaz web para todo
✅ Gratis permanente
✅ Fácil para principiantes


## OPCIÓN 4: GOOGLE CLOUD RUN (GRATIS)
## ====================================

1. Crear cuenta en Google Cloud (300 USD gratis)

2. Instalar gcloud CLI

3. Ejecutar:
   gcloud run deploy ole-scraper \
     --source . \
     --platform managed \
     --region us-central1 \
     --allow-unauthenticated

4. Deploy automático desde el código local

Ventajas:
✅ Muy escalable
✅ Solo pagas por uso
✅ Nivel gratuito generoso


## CONFIGURACIÓN EN EL FRONTEND
## ============================

Una vez desplegada la API, actualiza esta línea en el HTML:

const API_URL = 'https://tu-servicio.onrender.com/api';

Reemplaza 'tu-servicio.onrender.com' con tu URL real.


## AUTOMATIZACIÓN COMPLETA
## =======================

Con cualquiera de estas opciones, el scraper:

✅ Se ejecuta automáticamente 24/7
✅ Se actualiza cada 5 minutos
✅ No requiere que hagas nada
✅ Cache inteligente para mejor rendimiento
✅ Datos de ejemplo si falla el scraping
✅ CORS habilitado para tu frontend

¡Tu web de fútbol estará 100% automática!
